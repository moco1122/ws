1/25
56 / 8 * 22000
36 * 2
36 * 2 * 3
36 * 2 * 3 / 4
36 * 2 * 3 / 4 * 2
36 * 2 * 3 / 4 * 2 * 16
36 * 2 * 3 / 4 * 2 * 16 *
4
36 * 2 * 3 / 4 * 2
8000 / (36 * 2 * 3 / 4 * 2)
24000 / (36 * 2 * 3 / 4 * 2)
72 * 1000
233800 * 1.08
210800 * 1.08
144800 * 1.08
232800 - 88000
240000 / (5 * 12)
140000 / (5 * 12)
88000 / (5 * 12)
26 * 60
26 * 60 * 60
26 * 60 * 60 / 1024
plot(cars)
library(tidyverse)
install.packages("devtools")
devtools::install_github("thomasp85/patchwork")
devtools::install_github("thomasp85/patchwork")
devtools::install_github("thomasp85/patchwork")
devtools::install_github("thomasp85/patchwork")
install.packages("ggpubr")
library(tidyverse)
library(patchwork)
library(ggpubr)
n_sample <- 100
adu_per_e <- 2
sigma_rn_e <- 5
s_e_levels <- 1 * 2^(0:14)
dat <- tibble()
for(s_e in s_e_levels) {
sigma_e <- sqrt(sigma_rn_e^2 + s_e)
p_e <- s_e + rnorm(n_sample, 0.0, sigma_e)
s <- adu_per_e * s_e
p <- adu_per_e * p_e
dat <- bind_rows(dat, tibble(adu_per_e, sigma_rn_e, s_e, p_e, s, p))
}
sdat <- group_by(dat, adu_per_e, sigma_rn_e, s_e, s) %>%
summarise(mean_p_e = mean(p_e), sd_p_e = sd(p_e),
mean_p = mean(p), sd_p = sd(p))
g1 <- ggplot(dat) + geom_jitter(aes(s_e, p_e))
g2 <- ggplot(sdat) + geom_point(aes(s_e, sd_p_e))
g1 + g2 + theme(legend.position = "none")
library(tidyverse)
library(patchwork)
library(ggpubr)
isos <- 200 * 1^(0:10)
isos
isos <- 200 * 2^(0:10)
isos
isos <- 200 * 2^(0:6)
isos
2^6
2^13
8192 / 16
isos <- 200 * 2^(0:6)
isos
counts <- 2^(4:13)
counts
512 * 64
1/8000 * 512
8192 / 512
8192 / 64
8192 / 64
16 . 64
16 / 64
n_sample <- 1000
adu_per_e <- 20
sigma_rn_e <- 5
s_e_levels <- c(0.0, 1 * 2^(0:14))
dat <- tibble()
for(adu_per_e in c(0.1, 1, 10)) {
for(sigma_rn_e in c(1, 5, 10)) {
for(s_e in s_e_levels) {
sigma_e <- sqrt(sigma_rn_e^2 + s_e)
p_e <- s_e + rnorm(n_sample, 0.0, sigma_e)
s <- adu_per_e * s_e
p <- adu_per_e * p_e
dat <- bind_rows(dat, tibble(adu_per_e, sigma_rn_e, s_e, p_e, s, p))
}
}
}
dat <- mutate(dat, adu_per_e = factor(adu_per_e), sigma_rn_e = factor(sigma_rn_e),
Noise = sprintf("%s,%s", adu_per_e, sigma_rn_e))
dat <- filter(dat, p < 2^16)
sdat <- group_by(dat, adu_per_e, sigma_rn_e, Noise, s_e, s) %>%
summarise(mean_p_e = mean(p_e), sd_p_e = sd(p_e),
mean_p = mean(p), sd_p = sd(p))
g1 <- ggplot(dat) + geom_jitter(aes(s, p, color = Noise))
g1 <- g1 + facet_grid(adu_per_e ~ sigma_rn_e)
g2 <- ggplot(sdat) + geom_line(aes(s, sd_p^2, color = Noise))
g2 <- g2 + scale_x_log10() + scale_y_log10()
g1 + g2 + theme(legend.position = "none")
filter(sdat, Noise == "1,1") -> tsdat
nls(sd_p ~ sqrt(n^2 / k^2 + mean_p / k), data = tsdat, start = c(n = 1, k = 1))
n_sample <- 1000
adu_per_e <- 20
sigma_rn_e <- 5
s_e_levels <- c(0.0, 1 * 2^(0:14))
dat <- tibble()
for(adu_per_e in c(0.1, 1, 10)) {
for(sigma_rn_e in c(1, 5, 10)) {
for(s_e in s_e_levels) {
sigma_e <- sqrt(sigma_rn_e^2 + s_e)
p_e <- s_e + rnorm(n_sample, 0.0, sigma_e)
s <- adu_per_e * s_e
p <- adu_per_e * p_e
dat <- bind_rows(dat, tibble(adu_per_e, sigma_rn_e, s_e, p_e, s, p))
}
}
}
dat <- mutate(dat, adu_per_e = factor(adu_per_e), sigma_rn_e = factor(sigma_rn_e),
Noise = sprintf("%s,%s", adu_per_e, sigma_rn_e))
dat <- filter(dat, p < 2^16)
sdat <- group_by(dat, adu_per_e, sigma_rn_e, Noise, s_e, s) %>%
summarise(mean_p_e = mean(p_e), sd_p_e = sd(p_e),
mean_p = mean(p), sd_p = sd(p))
g1 <- ggplot(dat) + geom_jitter(aes(s, p, color = Noise))
g1 <- g1 + facet_grid(adu_per_e ~ sigma_rn_e)
g2 <- ggplot(sdat) + geom_line(aes(s, sd_p^2, color = Noise))
g2 <- g2 + scale_x_log10() + scale_y_log10()
g1 + g2 + theme(legend.position = "none")
filter(sdat, Noise == "1,1") -> tsdat
nls(sd_p ~ sqrt(n^2 / k^2 + mean_p / k), data = tsdat, start = c(n = 1, k = 1))
n_sample <- 1000
adu_per_e <- 20
sigma_rn_e <- 5
s_e_levels <- c(0.0, 1 * 2^(0:14))
dat <- tibble()
for(adu_per_e in c(0.1, 1, 10)) {
for(sigma_rn_e in c(1, 5, 10)) {
for(s_e in s_e_levels) {
sigma_e <- sqrt(sigma_rn_e^2 + s_e)
p_e <- s_e + rnorm(n_sample, 0.0, sigma_e)
s <- adu_per_e * s_e
p <- adu_per_e * p_e
dat <- bind_rows(dat, tibble(adu_per_e, sigma_rn_e, s_e, p_e, s, p))
}
}
}
dat <- mutate(dat, adu_per_e = factor(adu_per_e), sigma_rn_e = factor(sigma_rn_e),
Noise = sprintf("%s,%s", adu_per_e, sigma_rn_e))
dat <- filter(dat, p < 2^16)
sdat <- group_by(dat, adu_per_e, sigma_rn_e, Noise, s_e, s) %>%
summarise(mean_p_e = mean(p_e), sd_p_e = sd(p_e),
mean_p = mean(p), sd_p = sd(p))
g1 <- ggplot(dat) + geom_jitter(aes(s, p, color = Noise))
g1 <- g1 + facet_grid(adu_per_e ~ sigma_rn_e)
g2 <- ggplot(sdat) + geom_point(aes(s, sd_p^2, color = Noise)) + geom_line(aes(s, sd_p^2, color = Noise))
g2 <- g2 + scale_x_log10() + scale_y_log10()
g1 + g2 + theme(legend.position = "none")
filter(sdat, Noise == "1,1") -> tsdat
nls(sd_p ~ sqrt(n^2 / k^2 + mean_p / k), data = tsdat, start = c(n = 1, k = 1))
36 / 7360
100 / 2.8
12 * 100
12 * 100 / 60
source("tidyverse.R", encoding = "UTF8")
library(modelr)
source("tidyverse.R", encoding = "UTF8")
library(modelr)
dir <- "/astrophoto/"
csv_file <- glue("{dir}/dump_RGrGbB.csv")
dat <- read_csv0(csv_file)
saveRDS(dat, gsub(".csv", ".rds", csv_file))
source("tidyverse.R", encoding = "UTF8")
library(modelr)
dir <- "/astrophoto/dat"
csv_file <- glue("{dir}/dump_RGrGbB.csv")
dat <- read_csv0(csv_file)
saveRDS(dat, gsub(".csv", ".rds", csv_file))
rds_file <- glue("{dir}/dump_RGrGbB.rds")
dat <- readRDS(rds_file)
head(dat)
rds_file <- glue("{dir}/dump_RGrGbB.rds")
dat <- readRDS(rds_file)
gdat <- gather(dat, Pixel, Value, -ID, -ISO, -X, -Y)
gdat <- gdat %>%
group_by(ID, ISO, Pixel) %>%
nest()
#gdat <- gdat %>% filter(ISO == 400)
to_histogram_data <- function(Value) {
pb$tick()$print()
g <- ggplot() + geom_histogram(aes(Value), binwidth = 1)
hist_data <- layer_data(g) %>% as_tibble()
hist_data <- hist_data %>% transmute(x, count, ncount)
hist_data
}
pb <- progress_estimated(nrow(gdat))
hdat <- gdat %>%
mutate(data = map(data, ~ to_histogram_data(.x$Value)))
saveRDS(hdat, glue("{dir}/hdat_RGrGbB.rds"))
rds_file <- glue("{dir}/hdat_RGrGbB.rds")
hdat <- readRDS(rds_file)
hdat <- hdat %>% unnest(data)
hdat <- filter(hdat, x > -1008)
hdat <- mutate(hdat, nx = x / (ISO / 100))
hdat <- filter(hdat, count >= 10)
hdat <- arrange(hdat, Pixel)
g <- ggplot(hdat) + geom_point(aes(abs(nx), y = count, color = Pixel))
g <- g + facet_wrap(~ ISO, scale = "free_y", nrow = 2) + coord_cartesian(xlim = c(0, 10))
g <- g + scale_y_log10()
plot(g)
rds_file <- glue("{dir}/hdat_RGrGbB.rds")
hdat <- readRDS(rds_file)
hdat <- hdat %>% unnest(data)
hdat <- filter(hdat, x > -1008)
hdat <- mutate(hdat, nx = x / (ISO / 100))
hdat <- filter(hdat, count >= 10)
hdat <- arrange(hdat, Pixel)
g <- ggplot(hdat) + geom_point(aes(abs(nx), y = count, color = Pixel))
g <- g + facet_wrap(~ ISO, scale = "free_y", nrow = 2) + coord_cartesian(xlim = c(0, 10))
g <- g + scale_y_log10()
plot(g)
th_ncount_gauss0 <- 0.2
th_ncount_gauss <- 0.1
rds_file <- glue("{dir}/hdat_RGrGbB.rds")
hdat0 <- readRDS(rds_file)
select_fit_data <- function(data) {
fit_data <- data %>%
filter(count >= 10) %>%
filter(ncount >= 10e-4) %>%
filter(abs(x) > 0.0) %>%
filter(x > -1000)
fit_data
}
hdat <- hdat0 %>%
mutate(data = map(data, ~ select_fit_data(.x)))
#Regression and Prediction
#1. Tentative fitting for Gaussian noise.
mdat <- hdat %>%
mutate(lm_gauss0 =
map(data,
~ lm(log(count) ~ 1 + x + I(x^2),
data = filter(., count > max(count) * th_ncount_gauss0))))
mdat <- mdat %>%
mutate(data = map2(data, lm_gauss0,
~ .x %>%
mutate(pred_gauss0 = exp(predict(.y, .x)),
res1 = count - pred_gauss0,
Fit = ifelse(count > max(count) * th_ncount_gauss0,
"1_lm_gauss0", "0_notused"))))
#2. Fitting for RTS noise.
mdat <- mdat %>%
mutate(lm_rts = ifelse(ISO >= 6400,
map(data,
~ lm(log(res1) ~ 1 + I(abs(x)^2),
data = filter(., abs(x) >= quantile(abs(x))[4]))),
map(data,
~ lm(log(res1) ~ 1 + abs(x),
data = filter(., abs(x) >= quantile(abs(x))[4])))))
mdat <- mdat %>%
mutate(data = map2(data, lm_rts,
~ .x %>%
mutate(pred_rts = exp(predict(.y, .x)),
res2 = res1 - pred_rts,
count3 = count - pred_rts,
Fit = ifelse(abs(x) >= quantile(abs(x))[4], "2_lm_rts", Fit))))
#3. Figting for Gaussian noise.
mdat <- mdat %>%
mutate(lm_gauss = map(data,
~ lm(log(count3) ~ 1 + x + I(x^2),
data = filter(., count3 > max(count3) * th_ncount_gauss))))
mdat <- mdat %>%
mutate(data =
map2(data, lm_gauss,
~ .x %>%
mutate(pred_gauss = exp(predict(.y, .x)),
res3 = count3 - pred_gauss,
Fit = ifelse(count3 > max(count3) * th_ncount_gauss, "3_lm_gauss", Fit))))
#Extract coefficients
coef_lm_rts <- function(lm_rts, ISO) {
coef_rts <- tidy_coef(lm_rts, c("a0", "a1"))
if(ISO >= 6400) {
coef_rts <- coef_rts %>%
transmute(rts_a0 = exp(a0),
rts_A = rts_a0 * sqrt(2 * pi) * sqrt(- 1 / 2 / a1),
rts_sigma = sqrt(- 1 / 2 / a1))
}
else {
coef_rts <- coef_rts %>%
transmute(rts_a0 = exp(a0),
rts_A = rts_a0 / (-a1),
rts_sigma = sqrt(1 / ( (-a1)^2)))
}
coef_rts
}
coef_lm_gauss <- function(lm_gauss) {
coef_gauss <- tidy_coef(lm_gauss, c("a0", "a1", "a2"))
coef_gauss %>%
transmute(gauss_A0 = exp(a0 - a1^2 / 4 / a2),
gauss_mu = -(a1 / 2 / a2),
gauss_sigma = sqrt(- 1 / 2 / a2),
gauss_A = gauss_A0 * sqrt(2 * pi) * gauss_sigma)
}
mdat <- mdat %>% mutate(coef_rts = map2(lm_rts, ISO, coef_lm_rts))
mdat <- mdat %>% mutate(coef_gauss = map(lm_gauss, coef_lm_gauss))
saveRDS(mdat, gsub(".rds", "_model.rds", rds_file))
mdat
rds_file <- glue("{dir}/hdat_RGrGbB_model.rds")
model_dat <- readRDS(rds_file))
rds_file <- glue("{dir}/hdat_RGrGbB_model.rds")
model_dat <- readRDS(rds_file)
model_dat <- model_dat %>%
mutate(A0a0 = map2_dbl(coef_gauss, coef_rts, ~ .x$gauss_A0 + .y$rts_a0)) %>%
mutate(data = map2(data, A0a0,
~ .x %>% mutate(ncount = count / .y,
nres3 = res3 / .y)))
model_dat <- model_dat %>%
mutate(ldata = map(data,
~ tibble(x = seq(min(.$x), max(.$x), (max(.$x) - min(.$x))/100)))) %>%
mutate(ldata = map2(ldata, lm_rts,
~ mutate(.x, p_rts = exp(predict(.y, .x))))) %>%
mutate(ldata = map2(ldata, lm_gauss,
~ mutate(.x, p_gauss = exp(predict(.y, .x))))) %>%
mutate(ldata = map2(ldata, A0a0,
~ .x %>% mutate(p_rts = p_rts / .y,
p_gauss = p_gauss / .y)))
#Create plots.
plot_model_dat <- function(data, pixel) {
print(pixel)
pdat <- data %>% select(ISO, data) %>% unnest(data)
ldat <- data %>% select(ISO, ldata) %>% unnest(ldata)
g1 <- ggplot(pdat) + geom_point(aes(x, ncount, color = Fit))
g1 <- g1 + geom_line(data = ldat, aes(x, p_gauss), color = "red")
g1 <- g1 + geom_line(data = ldat, aes(x, p_rts), color = "blue")
g1 <- g1 + geom_line(data = ldat, aes(x, p_gauss + p_rts), color = "black")
g1 <- g1 + labs(y = "Norm. counts")
g2 <- ggplot(pdat) + geom_point(aes(x, nres3, color = Fit))
g2 <- g2 + labs(y = "Norm. res.")
g <- ((g1) /
(g2 + coord_cartesian(ylim = c(-0.05, 0.05))) /
(g1 + scale_y_log10() + coord_cartesian(ylim = c(5e-4, 1.0))) /
(g2 + scale_y_log10() + coord_cartesian(ylim = c(1e-5, 0.15))))
g <- g &
facet_wrap(~ factor(ISO), scale = "free_x", nrow = 1) &
theme(legend.position = "none")
g <- g + plot_annotation( title = "Fitting for read-out noises",
subtitle = sprintf("Pixel=%s", pixel))
plot(g)
}
model_dat %>%
split(.$Pixel) %>%
iwalk(plot_model_dat)
rds_file <- glue("{dir}/hdat_RGrGbB_model.rds")
model_dat <- readRDS(rds_file)
coef_dat <- model_dat %>%
select(ISO, Pixel, coef_gauss, coef_rts) %>%
unnest(coef_gauss, coef_rts)
coef_dat <- coef_dat %>%
nest(-Pixel) %>%
mutate(lm_gauss_sigma =
map(data,
~ lm(log10(gauss_sigma) ~ log10(ISO),
data = filter(., ISO >= 400)))) %>%
mutate(data =
map2(data, lm_gauss_sigma,
~ mutate(.x, pred_gauss_sigma = 10^(predict(.y, .x)))))
pdat <- coef_dat %>% unnest(data)
g <- ggplot(pdat) + geom_point(aes(ISO, gauss_sigma, color = Pixel))
g <- g + geom_line(aes(ISO, pred_gauss_sigma, color = Pixel))
g <- g + scale_x_log10() + scale_y_log10()
g <- g + coord_equal()
g
g <- ggplot(pdat) + geom_point(aes(ISO, rts_sigma, color = Pixel))
g <- g + scale_x_log10() + scale_y_log10()
g <- g + coord_equal()
g
